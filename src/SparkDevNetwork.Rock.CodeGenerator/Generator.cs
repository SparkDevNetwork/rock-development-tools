using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SparkDevNetwork.Rock.CodeGenerator
{
    public abstract class Generator
    {
        private readonly IGeneratorStringsProvider _stringsProvider;

        protected Generator( IGeneratorStringsProvider stringsProvider )
        {
            _stringsProvider = stringsProvider;
        }

        protected string GetCodeGenComment()
        {
            return _stringsProvider.AutoGeneratedComment;
        }

        protected string GetCopyrightComment()
        {
            return _stringsProvider.CopyrightComment;
        }

        protected string GenerateCSharpFile( IList<string> usings, string namespaceName, string body, bool isAutoGen = true )
        {
            var sb = new StringBuilder();

            if ( isAutoGen )
            {
                sb.Append( GetCodeGenComment() );
            }

            sb.Append( GetCopyrightComment() );

            sb.Append( GenerateCSharpUsings( usings ) );

            sb.AppendLine( $"namespace {namespaceName}" );
            sb.AppendLine( "{" );
            sb.AppendLine( body.Trim( '\r', '\n' ) );
            sb.AppendLine( "}" );

            return sb.ToString();
        }

        protected static string GenerateCSharpUsings( IList<string> usings )
        {
            var sb = new StringBuilder();

            var domainUsings = usings
                .Distinct()
                .Select( u => new
                {
                    Domain = u.Split( '.' )[0],
                    FullName = u
                } )
                .ToList();

            var usingGroups = domainUsings.GroupBy( u => u.Domain )
                .OrderByDescending( g => g.Key == "System" )
                .ThenBy( g => g.Key )
                .ToList();

            foreach ( var usingGroup in usingGroups )
            {
                foreach ( var u in usingGroup )
                {
                    sb.AppendLine( $"using {u.FullName};" );
                }

                sb.AppendLine();
            }

            return sb.ToString();
        }

        protected string GenerateTypeScriptFile( IList<TypeScriptImport> imports, string body, bool isAutoGen = true )
        {
            var sb = new StringBuilder();

            if ( isAutoGen )
            {
                sb.Append( GetCodeGenComment() );
            }

            sb.Append( GetCopyrightComment() );

            sb.Append( GenerateTypeScriptImports( imports ) );

            sb.AppendLine( body.Trim( '\r', '\n' ) );

            return sb.ToString();
        }

        protected string GenerateTypeScriptImports( IList<TypeScriptImport> imports )
        {
            var sb = new StringBuilder();

            var importGroups = imports.GroupBy( i => i.SourcePath )
                .OrderBy( g => g.Key.StartsWith( ".." ) )
                .ThenBy( g => g.Key )
                .ToList();

            foreach ( var importGroup in importGroups )
            {
                sb.Append( "import " );

                var defaultImport = importGroup.FirstOrDefault( i => !i.DefaultImport.IsNullOrWhiteSpace() );

                if ( defaultImport != null )
                {
                    sb.Append( $"{defaultImport}" );
                }

                var namedImports = importGroup
                    .Where( i => !i.NamedImport.IsNullOrWhiteSpace() )
                    .Select( i => i.NamedImport )
                    .Distinct()
                    .OrderBy( i => i )
                    .ToList();

                if ( namedImports.Any() )
                {
                    if ( defaultImport != null )
                    {
                        sb.Append( ", " );
                    }

                    sb.Append( "{ " );
                    sb.Append( string.Join( ", ", namedImports ) );
                    sb.Append( " }" );
                }

                sb.AppendLine( $" from \"{importGroup.Key}\";" );
            }

            if ( sb.Length > 0 )
            {
                sb.AppendLine();
            }

            return sb.ToString();
        }
    }
}
