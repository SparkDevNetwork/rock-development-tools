using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
{% if IsPlugin == true %}
using Rock;{% endif %}
using Rock.Attribute;{% if IsPlugin == true %}
using Rock.Blocks;{% endif %}
using Rock.Constants;
using Rock.Data;
using Rock.Model;
using Rock.Security;
using Rock.ViewModels.Blocks;{% if IsPlugin == false %}
using {{ ViewModelNamespace }};{% endif %}
using Rock.ViewModels.Utility;
using Rock.Web.Cache;{% if IsPlugin == true %}

using {{ ModelNamespace }};
using {{ ViewModelNamespace }};{% endif %}

namespace {{ BlockNamespace }}
{
    /// <summary>
    /// Displays the details of a particular {{ EntityName | SplitCase | Downcase }}.
    /// </summary>

    [DisplayName( "{{ EntityName | SplitCase }} Detail" )]
    [Category( "{{ Category }}" )]
    [Description( "Displays the details of a particular {{ EntityName | SplitCase | Downcase }}." )]
    [IconCssClass( "fa fa-question" )]{% if IsPlugin == false %}
    // [SupportedSiteTypes( Model.SiteType.Web )]{% else %}
    [SupportedSiteTypes( SiteType.Web )]{% endif %}

    #region Block Attributes

    #endregion

    [Rock.SystemGuid.EntityTypeGuid( "{{ BlockEntityGuid }}" )]
    [Rock.SystemGuid.BlockTypeGuid( "{{ BlockTypeGuid }}" )]
    public class {{ EntityName }}Detail : RockEntityDetailBlockType<{{ EntityName }}, {{ EntityName }}Bag>
    {
        #region Keys

        private static class PageParameterKey
        {
            public const string {{ EntityName }}Id = "{{ EntityName }}Id";
        }

        private static class NavigationUrlKey
        {
            public const string ParentPage = "ParentPage";
        }

        #endregion Keys

        #region Methods

        /// <inheritdoc/>
        public override object GetObsidianBlockInitialization()
        {
            var box = new DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag>();

            SetBoxInitialEntityState( box );

            box.NavigationUrls = GetBoxNavigationUrls();
            box.Options = GetBoxOptions( box.IsEditable );

            return box;
        }

        /// <summary>
        /// Gets the box options required for the component to render the view
        /// or edit the entity.
        /// </summary>
        /// <param name="isEditable"><c>true</c> if the entity is editable; otherwise <c>false</c>.</param>
        /// <returns>The options that provide additional details to the block.</returns>
        private {{ EntityName }}DetailOptionsBag GetBoxOptions( bool isEditable )
        {
            var options = new {{ EntityName }}DetailOptionsBag();

            return options;
        }

        /// <summary>
        /// Validates the {{ EntityName }} for any final information that might not be
        /// valid after storing all the data from the client.
        /// </summary>
        /// <param name="{{ EntityName | CamelCase }}">The {{ EntityName }} to be validated.</param>
        /// <param name="errorMessage">On <c>false</c> return, contains the error message.</param>
        /// <returns><c>true</c> if the {{ EntityName }} is valid, <c>false</c> otherwise.</returns>
        private bool Validate{{ EntityName }}( {{ EntityName }} {{ EntityName | CamelCase }}, out string errorMessage )
        {
            errorMessage = null;

            return true;
        }

        /// <summary>
        /// Sets the initial entity state of the box. Populates the Entity or
        /// ErrorMessage properties depending on the entity and permissions.
        /// </summary>
        /// <param name="box">The box to be populated.</param>
        private void SetBoxInitialEntityState( DetailBlockBox<{{ EntityName }}Bag, {{ EntityName }}DetailOptionsBag> box )
        {
            var entity = GetInitialEntity();

            if ( entity == null )
            {
                box.ErrorMessage = $"The {{'{'}}{{ EntityName }}.FriendlyTypeName} was not found.";
                return;
            }

            var isViewable = {% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Authorization.VIEW, RequestContext.CurrentPerson );
            box.IsEditable = {% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Authorization.EDIT, RequestContext.CurrentPerson );

            if ( entity.Id != 0 )
            {
                // Existing entity was found, prepare for view mode by default.
                if ( isViewable )
                {
                    box.Entity = GetEntityBagForView( entity );
                }
                else
                {
                    box.ErrorMessage = EditModeMessage.NotAuthorizedToView( {{ EntityName }}.FriendlyTypeName );
                }
            }
            else
            {
                // New entity is being created, prepare for edit mode by default.
                if ( box.IsEditable )
                {
                    box.Entity = GetEntityBagForEdit( entity );
                }
                else
                {
                    box.ErrorMessage = EditModeMessage.NotAuthorizedToEdit( {{ EntityName }}.FriendlyTypeName );
                }
            }

            PrepareDetailBox( box, entity );
        }

        /// <summary>
        /// Gets the entity bag that is common between both view and edit modes.
        /// </summary>
        /// <param name="entity">The entity to be represented as a bag.</param>
        /// <returns>A <see cref="{{ EntityName }}Bag"/> that represents the entity.</returns>
        private {{ EntityName }}Bag GetCommonEntityBag( {{ EntityName }} entity )
        {
            if ( entity == null )
            {
                return null;
            }

            return new {{ EntityName }}Bag
            {
                IdKey = entity.IdKey{% for property in Properties %},
                {{ property.Name }} = entity.{{ property.ConvertToBagCode }}{% endfor %}
            };
        }

        /// <inheritdoc/>
        protected override {{ EntityName }}Bag GetEntityBagForView( {{ EntityName }} entity )
        {
            if ( entity == null )
            {
                return null;
            }

            var bag = GetCommonEntityBag( entity );{% if UseAttributeValues == true %}

            if ( entity.Attributes == null )
            {
                entity.LoadAttributes( RockContext );
            }

            bag.LoadAttributesAndValuesForPublicView( entity, RequestContext.CurrentPerson, enforceSecurity: {% if UseEntitySecurity %}true{% else %}false{% endif %} );{% endif %}

            return bag;
        }

        //// <inheritdoc/>
        protected override {{ EntityName }}Bag GetEntityBagForEdit( {{ EntityName }} entity )
        {
            if ( entity == null )
            {
                return null;
            }

            var bag = GetCommonEntityBag( entity );{% if UseAttributeValues == true %}

            if ( entity.Attributes == null )
            {
                entity.LoadAttributes( RockContext );
            }

            bag.LoadAttributesAndValuesForPublicEdit( entity, RequestContext.CurrentPerson, enforceSecurity: {% if UseEntitySecurity %}true{% else %}false{% endif %} );{% endif %}

            return bag;
        }

        /// <inheritdoc/>
        protected override bool UpdateEntityFromBox( {{ EntityName }} entity, ValidPropertiesBox<{{ EntityName }}Bag> box )
        {
            if ( box.ValidProperties == null )
            {
                return false;
            }{% for property in Properties %}{% if property.Name == "IsSystem" %}{% continue %}{% endif %}

            box.IfValidProperty( nameof( box.Bag.{{ property.Name }} ),
                () => entity.{{ property.Name }}{% if property.IsEntity == true %}Id{% endif %} = box.Bag.{{ property.ConvertFromBagCode }} );{% endfor %}

            {% if UseAttributeValues == true %}box.IfValidProperty( nameof( box.Bag.AttributeValues ),
                () =>
                {
                    entity.LoadAttributes( RockContext );

                    entity.SetPublicAttributeValues( box.Bag.AttributeValues, RequestContext.CurrentPerson, enforceSecurity: {% if UseEntitySecurity %}true{% else %}false{% endif %} );
                } );

            {% endif %}return true;
        }

        /// <inheritdoc/>
        protected override {{ EntityName }} GetInitialEntity()
        {
            return GetInitialEntity<{{ EntityName }}, {{ ServiceName }}>( RockContext, PageParameterKey.{{ EntityName }}Id );
        }

        /// <summary>
        /// Gets the box navigation URLs required for the page to operate.
        /// </summary>
        /// <returns>A dictionary of key names and URL values.</returns>
        private Dictionary<string, string> GetBoxNavigationUrls()
        {
            return new Dictionary<string, string>
            {
                [NavigationUrlKey.ParentPage] = this.GetParentPageUrl()
            };
        }

        /// <inheritdoc/>
        protected override bool TryGetEntityForEditAction( string idKey, out {{ EntityName }} entity, out BlockActionResult error )
        {
            var entityService = new {{ EntityName }}Service( RockContext );
            error = null;

            // Determine if we are editing an existing entity or creating a new one.
            if ( idKey.IsNotNullOrWhiteSpace() )
            {
                // If editing an existing entity then load it and make sure it
                // was found and can still be edited.
                entity = entityService.Get( idKey, !PageCache.Layout.Site.DisablePredictableIds );
            }
            else
            {
                // Create a new entity.
                entity = new {{ EntityName }}();
                entityService.Add( entity );{% if UseOrder == true %}

                var maxOrder = entityService.Queryable()
                    .Select( t => ( int? ) t.Order )
                    .Max();

                entity.Order = maxOrder.HasValue ? maxOrder.Value + 1 : 0;{% endif %}
            }

            if ( entity == null )
            {
                error = ActionBadRequest( $"{{ '{' }}{{ EntityName }}.FriendlyTypeName} not found." );
                return false;
            }

            if ( !{% if UseEntitySecurity %}entity{% else %}BlockCache{% endif %}.IsAuthorized( Authorization.EDIT, RequestContext.CurrentPerson ) )
            {
                error = ActionBadRequest( $"Not authorized to edit ${{'{'}}{{ EntityName }}.FriendlyTypeName}." );
                return false;
            }

            return true;
        }

        #endregion

        #region Block Actions

        /// <summary>
        /// Gets the box that will contain all the information needed to begin
        /// the edit operation.
        /// </summary>
        /// <param name="key">The identifier of the entity to be edited.</param>
        /// <returns>A box that contains the entity and any other information required.</returns>
        [BlockAction]
        public BlockActionResult Edit( string key )
        {
            if ( !TryGetEntityForEditAction( key, out var entity, out var actionError ) )
            {
                return actionError;
            }{% if UseAttributeValues == true %}

            entity.LoadAttributes( RockContext );{% endif %}

            var bag = GetEntityBagForEdit( entity );

            return ActionOk( new ValidPropertiesBox<{{ EntityName }}Bag>
            {
                Bag = bag,
                ValidProperties = bag.GetType().GetProperties().Select( p => p.Name ).ToList()
            } );
        }

        /// <summary>
        /// Saves the entity contained in the box.
        /// </summary>
        /// <param name="box">The box that contains all the information required to save.</param>
        /// <returns>A new entity bag to be used when returning to view mode, or the URL to redirect to after creating a new entity.</returns>
        [BlockAction]
        public BlockActionResult Save( ValidPropertiesBox<{{ EntityName }}Bag> box )
        {
            var entityService = new {{ ServiceName }}( RockContext );

            if ( !TryGetEntityForEditAction( box.Bag.IdKey, out var entity, out var actionError ) )
            {
                return actionError;
            }

            // Update the entity instance from the information in the bag.
            if ( !UpdateEntityFromBox( entity, box ) )
            {
                return ActionBadRequest( "Invalid data." );
            }

            // Ensure everything is valid before saving.
            if ( !Validate{{ EntityName }}( entity, out var validationMessage ) )
            {
                return ActionBadRequest( validationMessage );
            }

            var isNew = entity.Id == 0;

            RockContext.WrapTransaction( () =>
            {
                RockContext.SaveChanges();{% if UseAttributeValues == true %}
                entity.SaveAttributeValues( RockContext );{% endif %}
            } );

            if ( isNew )
            {
                return ActionContent( System.Net.HttpStatusCode.Created, this.GetCurrentPageUrl( new Dictionary<string, string>
                {
                    [PageParameterKey.{{ EntityName }}Id] = entity.IdKey
                } ) );
            }

            // Ensure navigation properties will work now.
            entity = entityService.Get( entity.Id );{% if UseAttributeValues == true %}
            entity.LoadAttributes( RockContext );{% endif %}

            var bag = GetEntityBagForEdit( entity );

            return ActionOk( new ValidPropertiesBox<{{ EntityName }}Bag>
            {
                Bag = bag,
                ValidProperties = bag.GetType().GetProperties().Select( p => p.Name ).ToList()
            } );
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="key">The identifier of the entity to be deleted.</param>
        /// <returns>A string that contains the URL to be redirected to on success.</returns>
        [BlockAction]
        public BlockActionResult Delete( string key )
        {
            var entityService = new {{ ServiceName }}( RockContext );

            if ( !TryGetEntityForEditAction( key, out var entity, out var actionError ) )
            {
                return actionError;
            }

            if ( !entityService.CanDelete( entity, out var errorMessage ) )
            {
                return ActionBadRequest( errorMessage );
            }

            entityService.Delete( entity );
            RockContext.SaveChanges();

            return ActionOk( this.GetParentPageUrl() );
        }

        #endregion
    }
}
