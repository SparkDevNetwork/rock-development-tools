<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="idKey"
          itemTerm="My Object"
          :entityTypeGuid="EntityType.MyObject"
          :expectedRowCount="config.expectedRowCount ?? undefined"
          tooltipField="description"
          stickyHeader
          liveUpdates
          :onAddItem="config.isAddEnabled ? onAddItem : undefined"
          @selectItem="onSelectItem">
        <SelectColumn />

        <ReorderColumn @orderChanged="onOrderChanged" />

        <NumberColumn name="amount"
                       title="Amount"
                       field="amount"
                       :filter="numberValueFilter"
                       visiblePriority="xs" />

        <NumberColumn name="definedValueId"
                       title="Defined Value Id"
                       field="definedValueId"
                       :filter="numberValueFilter"
                       visiblePriority="xs" />

        <TextColumn name="buttonType"
                    title="Button Type"
                    field="buttonType"
                    :filter="textValueFilter"
                    visiblePriority="xs" />

        <DateColumn name="transactionDateTime"
                    title="Transaction Date Time"
                    field="transactionDateTime"
                    :filter="dateValueFilter"
                    visiblePriority="xs" />

        <AttributeColumns :attributes="config.gridDefinition?.attributeFields ?? []" />

        <SecurityColumn />

        <DeleteColumn v-if="config.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { onConfigurationValuesChanged, useConfigurationValues, useInvokeBlockAction, useReloadBlock } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, DateColumn, dateValueFilter, NumberColumn, numberValueFilter, TextColumn, textValueFilter, DeleteColumn, ReorderColumn, SecurityColumn, SelectColumn } from "@Obsidian/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { MyObjectListOptionsBag } from "@Obsidian/ViewModels/Blocks/Core/MyObjectList/myObjectListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./MyObjectList/types.partial";
    import { reactive, ref } from "vue";

    const config = useConfigurationValues<ListBlockBox<MyObjectListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // All blocks auto reload when changing block settings unless there is an
    // explicit reason not to (like using a custom reload function instead),
    // in which case you can remove this code.
    onConfigurationValuesChanged(useReloadBlock());
    
    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete my object.");
        }
    }

    /**
     * Called when the Add button has been clicked by the individual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", "0");
        }
    }

    /**
     * Called when a row has been dragged from one position to a new position.
     * 
     * @param item The item that was moved to a new position.
     * @param beforeItem The item that the first item was dropped before.
     * 
     * @returns `true` if the operation succeeded; otherwise `false`.
     */
    async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<boolean> {
        const result = await invokeBlockAction<string>("ReorderItem", {
            key: item["idKey"],
            beforeKey: beforeItem?.["idKey"] ?? null
        });

        return result.isSuccess;
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
